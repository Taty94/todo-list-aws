pipeline {
    agent none
    environment {
        AWS_REGION = 'us-east-1'
        STAGE = 'production'
        GITHUB_TOKEN = credentials('github-token')
    }
    stages {
        stage ('Get Code') {
            agent {label 'principal'}
            steps {
                git branch: 'master', url: 'https://github.com/Taty94/todo-list-aws'
                sh """
                    git clone --single-branch --branch production https://github.com/Taty94/todo-list-aws-config.git config-repo
                    cp config-repo/samconfig.toml .
                    rm -rf config-repo
                """
                stash name: 'code', includes: 'src/**,test/integration/**,myownresources/**,template.yaml,samconfig.toml'
                sh 'git checkout -- samconfig.toml'
            }
            post {
                always {
                    script {
                        def utils = load 'myownresources/common/utils'
                        utils.printAgentInfo()
                    }
                    cleanWs()
                }
            }
        }
        stage('Deploy') {
            agent {label 'aws-agent'}
            steps {
                unstash 'code'
                sh 'bash myownresources/agents/common/build.sh'
                sh 'bash myownresources/agents/common/deploy.sh'
                sh "bash myownresources/agents/common/post-deploy.sh ${STAGE} ${AWS_REGION}"
                stash name: 'api-url', includes: 'base_url.txt'
            }
            post {
                always {
                    script {
                        def utils = load 'myownresources/common/utils'
                        utils.printAgentInfo()
                    }
                    cleanWs()
                }
            }
        }
        stage('Integration Test'){
            agent {label 'integration-agent'}
            steps{
                unstash 'code'
                unstash 'api-url'
                echo 'Setup Virtualenv for testing'
                sh "bash myownresources/common/setup.sh"
                script {
                    def BASE_URL = readFile('base_url.txt').trim()
                    echo "$BASE_URL"
                    echo 'Initiating Integration Tests'
                    sh "bash myownresources/production/integration.sh $BASE_URL"
                }
            }
            post {
                always {
                    script {
                        def utils = load 'myownresources/common/utils'
                        utils.printAgentInfo()
                    }
                    cleanWs()
                }
            }
        }
    }
}